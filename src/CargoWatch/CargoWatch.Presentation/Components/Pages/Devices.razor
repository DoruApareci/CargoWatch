@page "/devices"
@inject IMediator Mediator
@inject NavigationManager Nav
@inject IJSRuntime JS

@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="m-0">Dispozitive înregistrate</h3>
    <button class="btn btn-success" @onclick="OpenAddModal">Adaugă dispozitiv</button>
</div>


<AddDeviceModal @ref="deviceModal" OnDeviceSaved="ReloadDevices" />
<GenerateDeviceReportModal @ref="reportModal" OnReportGenerated="OnReportGeneratedHandler" />

@if (devices == null)
{
    <p><em>Se încarcă...</em></p>
}
else if (devices.Count == 0)
{
    <p>Nu există dispozitive înregistrate.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nume</th>
                <th>Interval Mesaj (min)</th>
                <th>Acțiuni</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in devices)
            {
                <tr>
                    <td>@device.Name</td>
                    <td>@device.MessageInterval</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => DownloadConfig(device.Id))">
                            Descarcă Config
                        </button>
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => Statistics(device.Id))">
                            Statistici
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => OpenEditModal(device))">
                            Editează
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="@(() => OpenReportModal(device.Id))">
                            Generează raport
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DeviceModel> devices = new();
    private AddDeviceModal deviceModal = new();
    private GenerateDeviceReportModal reportModal = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadDevices();
    }

    private async Task OnReportGeneratedHandler()
    {

    }
    private void OpenReportModal(Guid deviceId)
    {
        reportModal.Open(deviceId);
    }

    private async Task LoadDevices()
    {
        devices = await Mediator.Send(new GetDevicesQuery());
    }

    private async Task ReloadDevices()
    {
        await LoadDevices();
        StateHasChanged();
    }

    private void OpenAddModal()
    {
        deviceModal.Open(null);
    }

    private void OpenEditModal(DeviceModel device)
    {
        deviceModal.Open(device);
    }

    private void DownloadConfig(Guid id)
    {
        var url = Nav.BaseUri + $"api/DeviceData/{id}/download";
        JS.InvokeVoidAsync("open", url, "_blank");
    }

    private void Statistics(Guid id)
    {
        Nav.NavigateTo($"/charts/{id}");
    }
}
